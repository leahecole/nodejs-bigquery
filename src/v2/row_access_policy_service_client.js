"use strict";
// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **
Object.defineProperty(exports, "__esModule", { value: true });
exports.RowAccessPolicyServiceClient = void 0;
var jsonProtos = require("../../protos/protos.json");
/**
 * Client JSON configuration object, loaded from
 * `src/v2/row_access_policy_service_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
var gapicConfig = require("./row_access_policy_service_client_config.json");
var version = require('../../../package.json').version;
/**
 *  Service for interacting with row access policies.
 * @class
 * @memberof v2
 */
var RowAccessPolicyServiceClient = /** @class */ (function () {
    /**
     * Construct an instance of RowAccessPolicyServiceClient.
     *
     * @param {object} [options] - The configuration object.
     * The options accepted by the constructor are described in detail
     * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
     * The common options are:
     * @param {object} [options.credentials] - Credentials object.
     * @param {string} [options.credentials.client_email]
     * @param {string} [options.credentials.private_key]
     * @param {string} [options.email] - Account email address. Required when
     *     using a .pem or .p12 keyFilename.
     * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
     *     .p12 key downloaded from the Google Developers Console. If you provide
     *     a path to a JSON file, the projectId option below is not necessary.
     *     NOTE: .pem and .p12 require you to specify options.email as well.
     * @param {number} [options.port] - The port on which to connect to
     *     the remote host.
     * @param {string} [options.projectId] - The project ID from the Google
     *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
     *     the environment variable GCLOUD_PROJECT for your project ID. If your
     *     app is running in an environment which supports
     *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
     *     your project ID will be detected automatically.
     * @param {string} [options.apiEndpoint] - The domain name of the
     *     API remote host.
     * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
     *     Follows the structure of {@link gapicConfig}.
     * @param {boolean} [options.fallback] - Use HTTP/1.1 REST mode.
     *     For more information, please check the
     *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
     * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
     *     need to avoid loading the default gRPC version and want to use the fallback
     *     HTTP implementation. Load only fallback version and pass it to the constructor:
     *     ```
     *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
     *     const client = new RowAccessPolicyServiceClient({fallback: true}, gax);
     *     ```
     */
    function RowAccessPolicyServiceClient(opts, gaxInstance) {
        var _a, _b, _c, _d, _e, _f;
        this._terminated = false;
        this.descriptors = {
            page: {},
            stream: {},
            longrunning: {},
            batching: {},
        };
        // Ensure that options include all the required fields.
        var staticMembers = this.constructor;
        if ((opts === null || opts === void 0 ? void 0 : opts.universe_domain) && (opts === null || opts === void 0 ? void 0 : opts.universeDomain) && (opts === null || opts === void 0 ? void 0 : opts.universe_domain) !== (opts === null || opts === void 0 ? void 0 : opts.universeDomain)) {
            throw new Error('Please set either universe_domain or universeDomain, but not both.');
        }
        var universeDomainEnvVar = (typeof process === 'object' && typeof process.env === 'object') ? process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'] : undefined;
        this._universeDomain = (_c = (_b = (_a = opts === null || opts === void 0 ? void 0 : opts.universeDomain) !== null && _a !== void 0 ? _a : opts === null || opts === void 0 ? void 0 : opts.universe_domain) !== null && _b !== void 0 ? _b : universeDomainEnvVar) !== null && _c !== void 0 ? _c : 'googleapis.com';
        this._servicePath = 'bigquery.' + this._universeDomain;
        var servicePath = (opts === null || opts === void 0 ? void 0 : opts.servicePath) || (opts === null || opts === void 0 ? void 0 : opts.apiEndpoint) || this._servicePath;
        this._providedCustomServicePath = !!((opts === null || opts === void 0 ? void 0 : opts.servicePath) || (opts === null || opts === void 0 ? void 0 : opts.apiEndpoint));
        var port = (opts === null || opts === void 0 ? void 0 : opts.port) || staticMembers.port;
        var clientConfig = (_d = opts === null || opts === void 0 ? void 0 : opts.clientConfig) !== null && _d !== void 0 ? _d : {};
        // Implicitly enable HTTP transport for the APIs that use REST as transport (e.g. Google Cloud Compute).
        if (!opts) {
            opts = { fallback: true };
        }
        else {
            opts.fallback = (_e = opts.fallback) !== null && _e !== void 0 ? _e : true;
        }
        var fallback = (_f = opts === null || opts === void 0 ? void 0 : opts.fallback) !== null && _f !== void 0 ? _f : (typeof window !== 'undefined' && typeof (window === null || window === void 0 ? void 0 : window.fetch) === 'function');
        opts = Object.assign({ servicePath: servicePath, port: port, clientConfig: clientConfig, fallback: fallback }, opts);
        // Request numeric enum values if REST transport is used.
        opts.numericEnums = true;
        // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
        if (servicePath !== this._servicePath && !('scopes' in opts)) {
            opts['scopes'] = staticMembers.scopes;
        }
        // Load google-gax module synchronously if needed
        if (!gaxInstance) {
            gaxInstance = require('google-gax');
        }
        // Choose either gRPC or proto-over-HTTP implementation of google-gax.
        this._gaxModule = opts.fallback ? gaxInstance.fallback : gaxInstance;
        // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
        this._gaxGrpc = new this._gaxModule.GrpcClient(opts);
        // Save options to use in initialize() method.
        this._opts = opts;
        // Save the auth object to the client, for use by other methods.
        this.auth = this._gaxGrpc.auth;
        // Set useJWTAccessWithScope on the auth object.
        this.auth.useJWTAccessWithScope = true;
        // Set defaultServicePath on the auth object.
        this.auth.defaultServicePath = this._servicePath;
        // Set the default scopes in auth client if needed.
        if (servicePath === this._servicePath) {
            this.auth.defaultScopes = staticMembers.scopes;
        }
        // Determine the client header string.
        var clientHeader = [
            "gax/".concat(this._gaxModule.version),
            "gapic/".concat(version),
        ];
        if (typeof process === 'object' && 'versions' in process) {
            clientHeader.push("gl-node/".concat(process.versions.node));
        }
        else {
            clientHeader.push("gl-web/".concat(this._gaxModule.version));
        }
        if (!opts.fallback) {
            clientHeader.push("grpc/".concat(this._gaxGrpc.grpcVersion));
        }
        else {
            clientHeader.push("rest/".concat(this._gaxGrpc.grpcVersion));
        }
        if (opts.libName && opts.libVersion) {
            clientHeader.push("".concat(opts.libName, "/").concat(opts.libVersion));
        }
        // Load the applicable protos.
        this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);
        // Some of the methods on this service return "paged" results,
        // (e.g. 50 results at a time, with tokens to get subsequent
        // pages). Denote the keys used for pagination and results.
        this.descriptors.page = {
            listRowAccessPolicies: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'rowAccessPolicies')
        };
        // Put together the default options sent with requests.
        this._defaults = this._gaxGrpc.constructSettings('google.cloud.bigquery.v2.RowAccessPolicyService', gapicConfig, opts.clientConfig || {}, { 'x-goog-api-client': clientHeader.join(' ') });
        // Set up a dictionary of "inner API calls"; the core implementation
        // of calling the API is handled in `google-gax`, with this code
        // merely providing the destination and request information.
        this.innerApiCalls = {};
        // Add a warn function to the client constructor so it can be easily tested.
        this.warn = this._gaxModule.warn;
    }
    /**
     * Initialize the client.
     * Performs asynchronous operations (such as authentication) and prepares the client.
     * This function will be called automatically when any class method is called for the
     * first time, but if you need to initialize it before calling an actual method,
     * feel free to call initialize() directly.
     *
     * You can await on this method if you want to make sure the client is initialized.
     *
     * @returns {Promise} A promise that resolves to an authenticated service stub.
     */
    RowAccessPolicyServiceClient.prototype.initialize = function () {
        var _this = this;
        // If the client stub promise is already initialized, return immediately.
        if (this.rowAccessPolicyServiceStub) {
            return this.rowAccessPolicyServiceStub;
        }
        // Put together the "service stub" for
        // google.cloud.bigquery.v2.RowAccessPolicyService.
        this.rowAccessPolicyServiceStub = this._gaxGrpc.createStub(this._opts.fallback ?
            this._protos.lookupService('google.cloud.bigquery.v2.RowAccessPolicyService') :
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            this._protos.google.cloud.bigquery.v2.RowAccessPolicyService, this._opts, this._providedCustomServicePath);
        // Iterate over each of the methods that the service provides
        // and create an API call method for each.
        var rowAccessPolicyServiceStubMethods = ['listRowAccessPolicies'];
        var _loop_1 = function (methodName) {
            var callPromise = this_1.rowAccessPolicyServiceStub.then(function (stub) { return function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                if (_this._terminated) {
                    return Promise.reject('The client has already been closed.');
                }
                var func = stub[methodName];
                return func.apply(stub, args);
            }; }, function (err) { return function () {
                throw err;
            }; });
            var descriptor = this_1.descriptors.page[methodName] ||
                undefined;
            var apiCall = this_1._gaxModule.createApiCall(callPromise, this_1._defaults[methodName], descriptor, this_1._opts.fallback);
            this_1.innerApiCalls[methodName] = apiCall;
        };
        var this_1 = this;
        for (var _i = 0, rowAccessPolicyServiceStubMethods_1 = rowAccessPolicyServiceStubMethods; _i < rowAccessPolicyServiceStubMethods_1.length; _i++) {
            var methodName = rowAccessPolicyServiceStubMethods_1[_i];
            _loop_1(methodName);
        }
        return this.rowAccessPolicyServiceStub;
    };
    Object.defineProperty(RowAccessPolicyServiceClient, "servicePath", {
        /**
         * The DNS address for this API service.
         * @deprecated Use the apiEndpoint method of the client instance.
         * @returns {string} The DNS address for this service.
         */
        get: function () {
            if (typeof process === 'object' && typeof process.emitWarning === 'function') {
                process.emitWarning('Static servicePath is deprecated, please use the instance method instead.', 'DeprecationWarning');
            }
            return 'bigquery.googleapis.com';
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(RowAccessPolicyServiceClient, "apiEndpoint", {
        /**
         * The DNS address for this API service - same as servicePath.
         * @deprecated Use the apiEndpoint method of the client instance.
         * @returns {string} The DNS address for this service.
         */
        get: function () {
            if (typeof process === 'object' && typeof process.emitWarning === 'function') {
                process.emitWarning('Static apiEndpoint is deprecated, please use the instance method instead.', 'DeprecationWarning');
            }
            return 'bigquery.googleapis.com';
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(RowAccessPolicyServiceClient.prototype, "apiEndpoint", {
        /**
         * The DNS address for this API service.
         * @returns {string} The DNS address for this service.
         */
        get: function () {
            return this._servicePath;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(RowAccessPolicyServiceClient.prototype, "universeDomain", {
        get: function () {
            return this._universeDomain;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(RowAccessPolicyServiceClient, "port", {
        /**
         * The port for this API service.
         * @returns {number} The default port for this service.
         */
        get: function () {
            return 443;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(RowAccessPolicyServiceClient, "scopes", {
        /**
         * The scopes needed to make gRPC calls for every method defined
         * in this service.
         * @returns {string[]} List of default scopes.
         */
        get: function () {
            return [
                'https://www.googleapis.com/auth/bigquery',
                'https://www.googleapis.com/auth/cloud-platform',
                'https://www.googleapis.com/auth/cloud-platform.read-only'
            ];
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Return the project ID used by this class.
     * @returns {Promise} A promise that resolves to string containing the project ID.
     */
    RowAccessPolicyServiceClient.prototype.getProjectId = function (callback) {
        if (callback) {
            this.auth.getProjectId(callback);
            return;
        }
        return this.auth.getProjectId();
    };
    RowAccessPolicyServiceClient.prototype.listRowAccessPolicies = function (request, optionsOrCallback, callback) {
        var _a, _b, _c;
        request = request || {};
        var options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] = this._gaxModule.routingHeader.fromParams({
            'project_id': (_a = request.projectId) !== null && _a !== void 0 ? _a : '',
            'dataset_id': (_b = request.datasetId) !== null && _b !== void 0 ? _b : '',
            'table_id': (_c = request.tableId) !== null && _c !== void 0 ? _c : '',
        });
        this.initialize();
        return this.innerApiCalls.listRowAccessPolicies(request, options, callback);
    };
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.projectId
     *   Required. Project ID of the row access policies to list.
     * @param {string} request.datasetId
     *   Required. Dataset ID of row access policies to list.
     * @param {string} request.tableId
     *   Required. Table ID of the table to list row access policies.
     * @param {string} request.pageToken
     *   Page token, returned by a previous call, to request the next page of
     *   results.
     * @param {number} request.pageSize
     *   The maximum number of results to return in a single response page. Leverage
     *   the page tokens to iterate through the entire collection.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.cloud.bigquery.v2.RowAccessPolicy|RowAccessPolicy} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listRowAccessPoliciesAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    RowAccessPolicyServiceClient.prototype.listRowAccessPoliciesStream = function (request, options) {
        var _a, _b, _c;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] = this._gaxModule.routingHeader.fromParams({
            'project_id': (_a = request.projectId) !== null && _a !== void 0 ? _a : '',
            'dataset_id': (_b = request.datasetId) !== null && _b !== void 0 ? _b : '',
            'table_id': (_c = request.tableId) !== null && _c !== void 0 ? _c : '',
        });
        var defaultCallSettings = this._defaults['listRowAccessPolicies'];
        var callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listRowAccessPolicies.createStream(this.innerApiCalls.listRowAccessPolicies, request, callSettings);
    };
    /**
     * Equivalent to `listRowAccessPolicies`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.projectId
     *   Required. Project ID of the row access policies to list.
     * @param {string} request.datasetId
     *   Required. Dataset ID of row access policies to list.
     * @param {string} request.tableId
     *   Required. Table ID of the table to list row access policies.
     * @param {string} request.pageToken
     *   Page token, returned by a previous call, to request the next page of
     *   results.
     * @param {number} request.pageSize
     *   The maximum number of results to return in a single response page. Leverage
     *   the page tokens to iterate through the entire collection.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.cloud.bigquery.v2.RowAccessPolicy|RowAccessPolicy}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v2/row_access_policy_service.list_row_access_policies.js</caption>
     * region_tag:bigquery_v2_generated_RowAccessPolicyService_ListRowAccessPolicies_async
     */
    RowAccessPolicyServiceClient.prototype.listRowAccessPoliciesAsync = function (request, options) {
        var _a, _b, _c;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] = this._gaxModule.routingHeader.fromParams({
            'project_id': (_a = request.projectId) !== null && _a !== void 0 ? _a : '',
            'dataset_id': (_b = request.datasetId) !== null && _b !== void 0 ? _b : '',
            'table_id': (_c = request.tableId) !== null && _c !== void 0 ? _c : '',
        });
        var defaultCallSettings = this._defaults['listRowAccessPolicies'];
        var callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listRowAccessPolicies.asyncIterate(this.innerApiCalls['listRowAccessPolicies'], request, callSettings);
    };
    /**
     * Terminate the gRPC channel and close the client.
     *
     * The client will no longer be usable and all future behavior is undefined.
     * @returns {Promise} A promise that resolves when the client is closed.
     */
    RowAccessPolicyServiceClient.prototype.close = function () {
        var _this = this;
        if (this.rowAccessPolicyServiceStub && !this._terminated) {
            return this.rowAccessPolicyServiceStub.then(function (stub) {
                _this._terminated = true;
                stub.close();
            });
        }
        return Promise.resolve();
    };
    return RowAccessPolicyServiceClient;
}());
exports.RowAccessPolicyServiceClient = RowAccessPolicyServiceClient;
